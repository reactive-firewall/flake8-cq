E101: Indentation contains mixed spaces and tabs.

Indentation has both tabs and spaces in it. Programmers should use either tabs or spaces, but not
both at the same time.

Anti-Pattern:
Note: The '•' character represents a space and the '→' character represents a tab.

In this example, the third line contains four spaces and two tabs.

def get_name(self):
    if self.first_name and self.last_name:
••••→ → return self.first_name + ' ' + self.last_name
    else:
        return self.last_name


Best Practice:
Highlander heuristic: Pick only one.

Spaces Option:
Change the line to use spaces only. You still need to choose how many spaces, though.

def get_name(self):
    if self.first_name and self.last_name:
••••••••return self.first_name + ' ' + self.last_name
    else:
        return self.last_name


Tabs Option:

Change the line to use tabs only. One tab per indentation level.

def get_name(self):
→if self.first_name and self.last_name:
→→return self.first_name + ' ' + self.last_name
→else:
→→return self.last_name

Rationale:

To quote PEP-8:
* "Spaces are the preferred indentation method."
* "Tabs should be used solely to remain consistent with code that is already indented with tabs."
* "Python disallows mixing tabs and spaces for indentation."

Regarding Tabs:
Tabs are just less pythonic, but still work as long as their use is consistent. Yet a single tab
is more efficient than multiple spaces, albeit minimal. Further tabs allow for a 1:1 ratio between
indentation level and indentation characters, allowing more flexibility in displaying the same code.

Convention Enumeration Proposal No. 8 (e.g., CEP-8 not PEP-8) which covers more than just Python,
advocates the use of tabs for consistency, and further defines the tab to be equivalent to 4 normal
space characters so that tooling may consistently convert the source indentation.

See also:
* PEP-8 - https://peps.python.org/pep-0008/#tabs-or-spaces
* The Meme - https://imgur.com/VyMu86F
